"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[362],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,_=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return t?r.createElement(_,o(o({ref:n},u),{},{components:t})):r.createElement(_,o({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},577:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],l={sidebar_position:1},s="Example Calculation",c={unversionedId:"using-spartans/example-calculation",id:"using-spartans/example-calculation",title:"Example Calculation",description:"Directory Structure",source:"@site/docs/using-spartans/example-calculation.md",sourceDirName:"using-spartans",slug:"/using-spartans/example-calculation",permalink:"/spartans/docs/using-spartans/example-calculation",editUrl:"https://github.com/narang-lab/spartans/edit/main/website/docs/using-spartans/example-calculation.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Installation Instructions",permalink:"/spartans/docs/installation"},next:{title:"Introduction",permalink:"/spartans/docs/tutorials/double-chamber-flow/intro"}},u={},p=[{value:"Directory Structure",id:"directory-structure",level:2},{value:"Understanding <code>parser.py</code>",id:"understanding-parserpy",level:2}],d={toc:p};function m(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"example-calculation"},"Example Calculation"),(0,i.kt)("h2",{id:"directory-structure"},"Directory Structure"),(0,i.kt)("p",null,"Navigate to the ",(0,i.kt)("inlineCode",{parentName:"p"},"SO3-cube-periodic-diffusive-absorbing")," directory under ",(0,i.kt)("inlineCode",{parentName:"p"},"examples")," in the source repo and list the directory's contents:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd examples/SO3-cube-periodic-diffusive-absorbing\ntree\n")),(0,i.kt)("p",null,"You should see the following structure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},".\n\u251c\u2500\u2500 clean.sh\n\u251c\u2500\u2500 in-files\n\u2502\xa0\xa0 \u2514\u2500\u2500 spartans_test_SO3_cube-periodic_dataset-compressed.h5\n\u251c\u2500\u2500 log-files\n\u251c\u2500\u2500 notebooks\n\u2502\xa0\xa0 \u2514\u2500\u2500 spartans-examples_SO3-cube-periodic-diffusive-absorbing.nb\n\u251c\u2500\u2500 out-files\n\u251c\u2500\u2500 parser.py\n\u2514\u2500\u2500 visualizations\n    \u2514\u2500\u2500 steady-state-horizontal-flux.png\n\n5 directories, 5 files\n")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"notebooks")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"visualizations")," directory are optional, but we find it's a natural way to organize the files used to generate the inputs and visualize the outputs. You can find an example walkthrough of how we generate various input files under ",(0,i.kt)("a",{parentName:"p",href:"/spartans/docs/tutorials/double-chamber-flow/intro"},"Tutorials"),"."))),(0,i.kt)("p",null,"The default directory structure consists of the following three directories:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"in-files"),": Directory SpaRTaNS looks in for the ",(0,i.kt)("inlineCode",{parentName:"li"},"*hdf5"),"/",(0,i.kt)("inlineCode",{parentName:"li"},"*.h5")," user-input files"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"out-files"),": Directory SpaRTaNS will export output files"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"log-files"),": Directory SpaRTaNS will write log files")),(0,i.kt)("p",null,"You can customize these directories in ",(0,i.kt)("inlineCode",{parentName:"p"},"parser.py"),", which we elaborate on below."),(0,i.kt)("p",null,"Finally, there's a utility ",(0,i.kt)("inlineCode",{parentName:"p"},"clean.sh")," script, which you might find useful when running calculations:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\nrm out-files/*\nrm log-files/*\n")),(0,i.kt)("h2",{id:"understanding-parserpy"},"Understanding ",(0,i.kt)("inlineCode",{parentName:"h2"},"parser.py")),(0,i.kt)("p",null,"SpaRTaNS is meant to be executed from the command line as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mpirun [-n num_processes] python parser.py\n")),(0,i.kt)("p",null,"Running the line above should result in output similar to"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"2022-05-01 11:41:44,786 : \n______             ____ _____      _   _______\n\\  ___)           |  _ (_   _)    | \\ | \\  ___)\n \\ \\  ______ __  _| |_) )| | __  _|  \\| |\\ \\\n  > >(  __  )  \\/ /  __/ | |/  \\/ /     | > >\n / /__| || ( ()  <| |    | ( ()  <| |\\  |/ /__\n/_____)_||_|\\__/\\_\\_|    |_|\\__/\\_\\_| \\_/_____)\n\n\n2022-05-01 11:41:44,786 : Setting up Database dictionary.\n2022-05-01 11:41:44,786 : Building Database object for files in ./in-files\n2022-05-01 11:41:44,786 : Preparing Database dry run.\n2022-05-01 11:41:44,786 : Parsing file ./in-files/spartans_test_SO3_cube-periodic_dataset-compressed.h5\n2022-05-01 11:41:44,792 : SpaRTaNS will import the following datasets:\n--------------------------------------------------------------------------------\nconnectivity_info:\n  bounce_tensors:\n    bounce_00: (48, 48)\n    bounce_01: (48, 48)\n    bounce_02: (48, 48)\n  connectivity: (1, 1)\n  connectivity(structure(mesh(000)--material(A))--structure(mesh(000)--material(A))):\n    bounce_00: (1452, 4)\n    bounce_01: (1452, 4)\n    bounce_02: (1452, 4)\n  connectivity.ordering:\n  - '000'\nmaterial(A):\n  diagonal: (48)\n  frequencies: (48)\n  mixing_matrix: (48, 48)\n  velocities: (48, 3)\nmesh(000):\n  surface_normals: (1452, 3)\n  tetrahedra_indices: (7986, 4)\n  triangle_indices: (1452, 3)\n  vertices: (1728, 3)\nstructure(mesh(000)--material(A)):\n  body_injection: (48, 1728)\n--------------------------------------------------------------------------------\n\nABORT now if this is not what you expected.\n")),(0,i.kt)("p",null,"The output above is SpaRTaNS inferring the user-input dataset shapes by looking into the ",(0,i.kt)("inlineCode",{parentName:"p"},"database_directory"),".\nThis, along with the ",(0,i.kt)("inlineCode",{parentName:"p"},"output_directory")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"log_directory")," can be changed by chaning the following lines in ",(0,i.kt)("inlineCode",{parentName:"p"},"parser.py"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"    from spartans.logger_builder import setup_logger\n    from spartans.parser_utils import print_spartans_logo\n\n# highlight-start\n    config_dict = {\n            'directories': {\n                'database_directory': './in-files',\n                'output_directory': './out-files',\n                'log_directory': './log-files'\n                }\n            }\n# highlight-end\n\n    # Set up log files\n    log_directory = config_dict['directories']['log_directory']\n    setup_logger('main_log', '{}/main_log.txt'.format(log_directory))\n    main_log = logging.getLogger('main_log')\n")))}m.isMDXComponent=!0}}]);