"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[362],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,g=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return n?r.createElement(g,o(o({ref:t},c),{},{components:n})):r.createElement(g,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},577:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_position:1},l="Example Calculation",u={unversionedId:"using-spartans/example-calculation",id:"using-spartans/example-calculation",title:"Example Calculation",description:"Directory Structure",source:"@site/docs/using-spartans/example-calculation.md",sourceDirName:"using-spartans",slug:"/using-spartans/example-calculation",permalink:"/spartans/docs/using-spartans/example-calculation",editUrl:"https://github.com/narang-lab/spartans/edit/main/website/docs/using-spartans/example-calculation.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Installation Instructions",permalink:"/spartans/docs/installation"},next:{title:"API Design",permalink:"/spartans/docs/using-spartans/api-design"}},c={},p=[{value:"Directory Structure",id:"directory-structure",level:2},{value:"Understanding <code>parser.py</code>",id:"understanding-parserpy",level:2},{value:"C++ Streaming Operator Output",id:"c-streaming-operator-output",level:2}],d={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"example-calculation"},"Example Calculation"),(0,i.kt)("h2",{id:"directory-structure"},"Directory Structure"),(0,i.kt)("p",null,"Navigate to the ",(0,i.kt)("inlineCode",{parentName:"p"},"SO3-cube-periodic-diffusive-absorbing")," directory under ",(0,i.kt)("inlineCode",{parentName:"p"},"examples")," in the source repo and list the directory's contents:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd examples/SO3-cube-periodic-diffusive-absorbing\ntree\n")),(0,i.kt)("p",null,"You should see the following structure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},".\n\u251c\u2500\u2500 clean.sh\n\u251c\u2500\u2500 in-files\n\u2502\xa0\xa0 \u2514\u2500\u2500 spartans_test_SO3_cube-periodic_dataset-compressed.h5\n\u251c\u2500\u2500 log-files\n\u251c\u2500\u2500 notebooks\n\u2502\xa0\xa0 \u2514\u2500\u2500 spartans-examples_SO3-cube-periodic-diffusive-absorbing.nb\n\u251c\u2500\u2500 out-files\n\u251c\u2500\u2500 parser.py\n\u2514\u2500\u2500 visualizations\n    \u2514\u2500\u2500 steady-state-horizontal-flux.png\n\n5 directories, 5 files\n")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"notebooks")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"visualizations")," directory are optional, but we find it's a natural way to organize the files used to generate the inputs and visualize the outputs. You can find an example walkthrough of how we generate various input files under ",(0,i.kt)("a",{parentName:"p",href:"/spartans/docs/tutorials/double-chamber-flow/intro"},"Tutorials"),"."))),(0,i.kt)("p",null,"The default directory structure consists of the following three directories:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"in-files"),": Directory SpaRTaNS looks in for the ",(0,i.kt)("inlineCode",{parentName:"li"},"*hdf5"),"/",(0,i.kt)("inlineCode",{parentName:"li"},"*.h5")," user-input files"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"out-files"),": Directory SpaRTaNS will export output files"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"log-files"),": Directory SpaRTaNS will write log files")),(0,i.kt)("p",null,"You can customize these directories in ",(0,i.kt)("inlineCode",{parentName:"p"},"parser.py"),", which we elaborate on below."),(0,i.kt)("p",null,"Finally, there's a utility ",(0,i.kt)("inlineCode",{parentName:"p"},"clean.sh")," script, which you might find useful when running calculations:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\nrm out-files/*\nrm log-files/*\n")),(0,i.kt)("h2",{id:"understanding-parserpy"},"Understanding ",(0,i.kt)("inlineCode",{parentName:"h2"},"parser.py")),(0,i.kt)("p",null,"SpaRTaNS is meant to be executed from the command line as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mpirun [-n num_processes] python parser.py\n")),(0,i.kt)("p",null,"Running the line above should result in output similar to"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"2022-05-01 11:41:44,786 : \n______             ____ _____      _   _______\n\\  ___)           |  _ (_   _)    | \\ | \\  ___)\n \\ \\  ______ __  _| |_) )| | __  _|  \\| |\\ \\\n  > >(  __  )  \\/ /  __/ | |/  \\/ /     | > >\n / /__| || ( ()  <| |    | ( ()  <| |\\  |/ /__\n/_____)_||_|\\__/\\_\\_|    |_|\\__/\\_\\_| \\_/_____)\n\n\n2022-05-01 11:41:44,786 : Setting up Database dictionary.\n2022-05-01 11:41:44,786 : Building Database object for files in ./in-files\n2022-05-01 11:41:44,786 : Preparing Database dry run.\n2022-05-01 11:41:44,786 : Parsing file ./in-files/spartans_test_SO3_cube-periodic_dataset-compressed.h5\n2022-05-01 11:41:44,792 : SpaRTaNS will import the following datasets:\n--------------------------------------------------------------------------------\nconnectivity_info:\n  bounce_tensors:\n    bounce_00: (48, 48)\n    bounce_01: (48, 48)\n    bounce_02: (48, 48)\n  connectivity: (1, 1)\n  connectivity(structure(mesh(000)--material(A))--structure(mesh(000)--material(A))):\n    bounce_00: (1452, 4)\n    bounce_01: (1452, 4)\n    bounce_02: (1452, 4)\n  connectivity.ordering:\n  - '000'\nmaterial(A):\n  diagonal: (48)\n  frequencies: (48)\n  mixing_matrix: (48, 48)\n  velocities: (48, 3)\nmesh(000):\n  surface_normals: (1452, 3)\n  tetrahedra_indices: (7986, 4)\n  triangle_indices: (1452, 3)\n  vertices: (1728, 3)\nstructure(mesh(000)--material(A)):\n  body_injection: (48, 1728)\n--------------------------------------------------------------------------------\n\nABORT now if this is not what you expected.\n")),(0,i.kt)("p",null,"The output above is SpaRTaNS inferring the user-input dataset shapes by looking into the ",(0,i.kt)("inlineCode",{parentName:"p"},"database_directory"),".\nThis, along with the ",(0,i.kt)("inlineCode",{parentName:"p"},"output_directory")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"log_directory")," can be changed by chaning the following lines in ",(0,i.kt)("inlineCode",{parentName:"p"},"parser.py"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"    from spartans.logger_builder import setup_logger\n    from spartans.parser_utils import print_spartans_logo\n\n# highlight-start\n    config_dict = {\n            'directories': {\n                'database_directory': './in-files',\n                'output_directory': './out-files',\n                'log_directory': './log-files'\n                }\n            }\n# highlight-end\n\n    # Set up log files\n    log_directory = config_dict['directories']['log_directory']\n    setup_logger('main_log', '{}/main_log.txt'.format(log_directory))\n    main_log = logging.getLogger('main_log')\n")),(0,i.kt)("p",null,"SpaRTaNS then proceeds to set up the necessary ",(0,i.kt)("inlineCode",{parentName:"p"},"Structure")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Interface")," objects (see ",(0,i.kt)("a",{parentName:"p",href:"/spartans/docs/using-spartans/api-design"},"API Design section"),").  "),(0,i.kt)("p",null,"SpaRTaNS solves the BTE iteratively (see ",(0,i.kt)("a",{parentName:"p",href:"/spartans/docs/formalism/boltzmann-transport-theory"},"Formalism section"),").\nAs such, inputs/outputs are stored internally for each structure and iteration number."),(0,i.kt)("p",null,"However, to avoid large output size, and since the steady-state distribution is given by the accumulated distribution functions at each iteration, SpaRTaNS only writes the accumulated distribution and surface fluxes in ",(0,i.kt)("inlineCode",{parentName:"p"},"{outDir}/accumulated_{structureId}.h5")," by default.\nIf individual distribution outputs are required (e.g. for debugging), the output files 'verbosity' can be controlled by changing the following lines:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"    # Set up Structure objects\n    main_log.info('Setting up Structure objects.')\n    structure_keys = [struct_key for struct_key in database_dict.keys() if 'structure(' in struct_key]\n# highlight-start\n    structures = [Structure(comm,config_dict,database_dict,struct_key, write_debug_outputs=False, \n                  debug_frequency=1) for struct_key in structure_keys]\n# highlight-end\n")),(0,i.kt)("p",null,"Finally, SpaRTaNS uses a ",(0,i.kt)("inlineCode",{parentName:"p"},"Scheduler")," object (see ",(0,i.kt)("a",{parentName:"p",href:"/spartans/docs/using-spartans/api-design"},"API Design section"),") to handle the various collision, and bounce operators in a logical sequence.\nThe default ",(0,i.kt)("inlineCode",{parentName:"p"},"Scheduler")," uses the following pseudo-code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"for struct in structures:\n    # First push from structures interfaces\n    for interface_id, interface_object in struct.interfaces.items():\n        interface_object.push_to(struct)\n\n    # Then, run structure\n    struct.run()\n\n    # Finally, pull to structures interfaces\n    for interface_id, interface_object in struct.interfaces.items():\n        interface_object.pull_from()\n")),(0,i.kt)("p",null,"This can be changed by modifying the following lines in ",(0,i.kt)("inlineCode",{parentName:"p"},"parser.py"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"    # Set up Scheduler\n    # Note: change this to fit your needs, and/or define new schedulers in scheduler.py\n    main_log.info('Setting up Scheduler.')\n\n# highlight-start\n    from spartans.scheduler import Unweighted_simple as Scheduler\n    scheduler = Scheduler(\n            min_condition=50,\n            structures=structures\n            )\n#highlight-end\n")),(0,i.kt)("h2",{id:"c-streaming-operator-output"},"C++ Streaming Operator Output"),(0,i.kt)("p",null,"In addition to the collision and bounce operator logs from the python side, SpaRTaNS also outputs the streaming operator logs from the c++ side, with output similar to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# highlight-next-line\nnTets: 7986  nUniqueTets: 6  expectedSpeedup: 1331x\nnFaces: 16698  nExtFaces: 1452\nExplicit event mode.\nnBins: 48  nEvents: 48  nVerts: 1728\nnEvents by process: [ 12 12 12 12 ]\n\nProcessing events: 8% 17% 25% 33% 42% 50% 58% 67% 75% 83% 92% 100% done.\nApplying Oinv: done.\n\n# highlight-start\nSum rule check:\nLargest sum rule error: 5.551115e-15, at ie: 8\n# highlight-end\n")),(0,i.kt)("p",null,"Two points are of interest in the output above:  "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"SpaRTaNS recognizes the mesh is very regular and only performs streaming in the 6 ",(0,i.kt)("inlineCode",{parentName:"li"},"nUniqueTets")," tetrahedra, rotating and translating where appropriate to achieve an expected speedup of 1331x. As such, when the geometry allows it, it's beneficial to use a regular mesh."),(0,i.kt)("li",{parentName:"ul"},"SpaRTaNS reports the largest sum-rule error ((Integrated ",(0,i.kt)("inlineCode",{parentName:"li"},"Body_in")," + Integrated ",(0,i.kt)("inlineCode",{parentName:"li"},"Surface_in"),") - (Integrated ",(0,i.kt)("inlineCode",{parentName:"li"},"Body_out")," + Integrated ",(0,i.kt)("inlineCode",{parentName:"li"},"Surface_out"),")) across states. You'll want to check this is reasonably small across all runs.")))}m.isMDXComponent=!0}}]);